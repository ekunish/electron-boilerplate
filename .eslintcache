[{"/Users/ekunish/Develop/react/electron-boilerplate/src/index.tsx":"1","/Users/ekunish/Develop/react/electron-boilerplate/src/reportWebVitals.ts":"2","/Users/ekunish/Develop/react/electron-boilerplate/src/App.tsx":"3","/Users/ekunish/Develop/react/electron-boilerplate/src/components/pages/TopPage.tsx":"4","/Users/ekunish/Develop/react/electron-boilerplate/src/components/organisms/Audio.tsx":"5"},{"size":500,"mtime":1612342666529,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1612342666531,"results":"8","hashOfConfig":"7"},{"size":209,"mtime":1612756631156,"results":"9","hashOfConfig":"7"},{"size":1530,"mtime":1612770092018,"results":"10","hashOfConfig":"7"},{"size":1701,"mtime":1612775078395,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"2wp6iw",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"/Users/ekunish/Develop/react/electron-boilerplate/src/index.tsx",[],["26","27"],"/Users/ekunish/Develop/react/electron-boilerplate/src/reportWebVitals.ts",[],"/Users/ekunish/Develop/react/electron-boilerplate/src/App.tsx",["28","29","30"],"import React, { useCallback, useEffect, useState } from 'react';\nimport './App.css';\nimport TopPage from './components/pages/TopPage';\n\nfunction App() {\n\n  return (\n    <TopPage />\n  );\n}\n\nexport default App;\n","/Users/ekunish/Develop/react/electron-boilerplate/src/components/pages/TopPage.tsx",["31"],"import { Box, Button, Container, Typography } from '@material-ui/core';\nimport React, { useCallback, useEffect, useState } from 'react'\nimport Audio from '../organisms/Audio'\n\nconst TopPage: React.FC = () => {\n\n  //（1）filename, dataをステート定義\n  const [filename, setfilename] = useState(\"\");\n  const [isAudio, setIsAudio] = useState(false)\n\n  //（2）ダイアログを開く、ボタンのコールバックを定義\n  const handleDialog = useCallback(() => {\n    //（2-1）window.ipc.openfile関数を呼び出して promise の処理\n    window.ipc.openFile().then((res) => {\n      //（2-2）戻り値がnullでなければ\n      if (res) {\n        // （2-3）setfilenameとsetdataでステートを更新する\n        setfilename(res.filename);\n      }\n    });\n  }, []);\n\n  // useEffect(() => {\n  //   data && console.log(data)\n  // }, [data])\n\n  const handleOnAudio = () => {\n    setIsAudio(true)\n    console.log(isAudio)\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <Box>\n        <Button onClick={() => window.ipc.test(\"Hello, Electron Main World.\")}>\n          ipcテストメッセージ送信\n        </Button>\n      </Box>\n\n      <Box>\n        <Typography>{filename}</Typography>\n        <Button onClick={() => handleDialog}>JSON Open</Button>\n      </Box>\n\n      <Box>\n        <Button onClick={handleOnAudio}>audio open</Button>\n      </Box>\n      <Box>\n        {isAudio === false ? (<Typography>not yet</Typography>) : (<Audio />)}\n      </Box>\n    </Container>\n  )\n}\n\nexport default TopPage;","/Users/ekunish/Develop/react/electron-boilerplate/src/components/organisms/Audio.tsx",["32","33"],"import { Box, Button, Typography } from '@material-ui/core';\nimport React, { useCallback, useState } from 'react'\n\nconst Audio: React.FC = () => {\n  const [isPlaying, setIsPlaying] = useState(false)\n  // const [sampleSource, setSampleSource] = useState<AudioBufferSourceNode>()\n\n  var sampleSource = {} as AudioBufferSourceNode\n\n  window.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n  const ctx = new AudioContext();\n\n  const setupSample = async () => {\n    const response = await fetch(\"../../sample.mp3\");\n    const arrayBuffer = await response.arrayBuffer();\n    const audioBuffer = await ctx.decodeAudioData(arrayBuffer);\n    return audioBuffer;\n  }\n\n\n  const playSample = (ctx: AudioContext, audioBuffer: AudioBuffer) => {\n    sampleSource = ctx.createBufferSource()\n\n    if (!sampleSource) return\n\n    console.log(sampleSource)\n    sampleSource.buffer = audioBuffer\n    console.log(sampleSource)\n    sampleSource.connect(ctx.destination);\n    sampleSource.start();\n\n    setIsPlaying(true)\n  }\n\n\n  const handleOnPlay = async () => {\n    // if (isPlaying) return\n\n    console.log(\"handleOnPlay\")\n\n    const sample = await setupSample()\n    playSample(ctx, sample)\n  }\n\n\n  const handleOnStop = async () => {\n    sampleSource.disconnect()\n    // await sampleSource?.stop();\n    setIsPlaying(false)\n  }\n\n\n  return (\n\n    <Box>\n      <Typography>read a file as buffer</Typography>\n      <Box>\n        <Typography>audio</Typography>\n        {/* <Button onClick={handleDialog}>mp3 Open</Button> */}\n      </Box>\n      <Box>\n        <Button onClick={handleOnPlay}>play</Button>\n        <Button onClick={handleOnStop}>stop</Button>\n      </Box>\n    </Box>\n  )\n}\n\nexport default Audio;",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":1,"column":17,"nodeType":"40","messageId":"41","endLine":1,"endColumn":28},{"ruleId":"38","severity":1,"message":"42","line":1,"column":30,"nodeType":"40","messageId":"41","endLine":1,"endColumn":39},{"ruleId":"38","severity":1,"message":"43","line":1,"column":41,"nodeType":"40","messageId":"41","endLine":1,"endColumn":49},{"ruleId":"38","severity":1,"message":"42","line":2,"column":30,"nodeType":"40","messageId":"41","endLine":2,"endColumn":39},{"ruleId":"38","severity":1,"message":"39","line":2,"column":17,"nodeType":"40","messageId":"41","endLine":2,"endColumn":28},{"ruleId":"38","severity":1,"message":"44","line":5,"column":10,"nodeType":"40","messageId":"41","endLine":5,"endColumn":19},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"@typescript-eslint/no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'isPlaying' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]